{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"12337093901049702937","abi":{"parameters":[{"name":"verification_key","type":{"kind":"array","length":128,"type":{"kind":"field"}},"visibility":"private"},{"name":"proof","type":{"kind":"array","length":456,"type":{"kind":"field"}},"visibility":"private"},{"name":"public_inputs","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"dZDRCoMwDEX/Jc99sIpz+CtjSNUohdKW2A6G9N8XRZ0++NI0uT235M7QYxvHRtvBTVC/ZmhJG6PHxrhOBe0sT+ckYG+bQIg8gpPOlFeENkBtozECPsrE9dHklV1rUMRqJgBtz5UNB21wuSXxp7N7NC/KDS4qeeDllZf3vHwcBrKSz8Mhz1N6c6c6TZedIWNRgOQzLbakVWtwS2OItjuFE75+V/b4PLkO+0i4mK4af/MD","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"global HONK_VK_SIZE: u32 = 128;\nglobal HONK_PROOF_SIZE: u32 = 456;\nglobal HONK_IDENTIFIER: u32 = 1;\n\nfn main(\n    verification_key: [Field; HONK_VK_SIZE],\n    proof: [Field; HONK_PROOF_SIZE],\n    public_inputs: pub [Field; 2],\n) {\n    std::verify_proof_with_type(\n        verification_key,\n        proof,\n        public_inputs,\n        0x0,\n        HONK_IDENTIFIER,\n    );\n}","path":"/home/user/code/projects/anticheatz/circuits/gamePlayProver/src/main.nr"}},"names":["main"],"brillig_names":[]}